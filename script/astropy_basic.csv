issue,id,reporter,closed_by,created_at,updated_at,closed_at,state,assignee,milestone,comments,label_name,url,title,body
7157,294108647,astrofrog,saimn,2018-02-03 12:52:56,2018-02-05 17:19:57,2018-02-05 17:19:56,closed,,v3.0.0,13,Affects-dev;Bug;Critical;Ready-for-final-review;io.fits;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/7157,b'Alternate fix for FITS regression with table keywords',"b'This is an alternative to https://github.com/astropy/astropy/pull/7153 to fix #7145 - basically it just prevents time-related keywords from being automatically removed from the Header. Time-related keywords can still be overwritten if the corresponding attributes are set on Column objects, but this doesn\'t affect backward-compatibility since those Column attributes didn\'t exist before. This approach thus guarantees full backward-compatibility (unless I\'ve overlooked something), and emits a deprecation warning to mention that these keywords will be dropped in future. Example usage:\r\n\r\n```python\r\nIn [1]: import astropy\r\n   ...: from astropy.io import fits\r\n   ...: import numpy as np\r\n   ...: \r\n   ...: def create_column_descriptions():\r\n   ...:     col = []\r\n   ...:     col.append(fits.Column(name=""TIME"", format=""1E"", unit=""s""))\r\n   ...:     col.append(fits.Column(name=""RAWX"", format=""1I"", unit=""pixel""))\r\n   ...:     cd = fits.ColDefs(col)\r\n   ...: \r\n   ...:     return cd\r\n   ...: \r\n   ...: def create_header():\r\n   ...:     hdr = fits.Header()\r\n   ...:     hdr[\'RA\'] = (1.581250000000E+00, \'RA of reference aperture center \')\r\n   ...:     hdr[\'DEC\'] = (2.020277777778E+01, \'Declination of reference aperture center\')\r\n   ...:     hdr[\'TCTYP2\'] = (\'RA---TAN\', \'axis type for dimension 1\')\r\n   ...:     hdr[\'TCRVL2\'] = (-999.0, \'sky coordinates of 1st axis\')\r\n   ...: \r\n   ...:     return hdr\r\n   ...: \r\n   ...: columns = create_column_descriptions()\r\n   ...: header = create_header()\r\n   ...: \r\n\r\nIn [2]: print(header.tostring(sep=\'\\n\'))\r\n   ...: print(columns)\r\n   ...: \r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTCTYP2  = \'RA---TAN\'           / axis type for dimension 1                      \r\nTCRVL2  =               -999.0 / sky coordinates of 1st axis                    \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'\r\n)\r\n```\r\n\r\nSo far so good. Let\'s make a new HDU from the columns and header:\r\n\r\n```python\r\nIn [3]: hdu = fits.BinTableHDU.from_columns(columns, header)\r\n   ...: \r\n/Users/tom/Dropbox/Code/Astropy/astropy/astropy/io/fits/hdu/table.py:341: UserWarning: The following keywords are now recognized as special column-related attributes and should be set via the Column objects: TCRVLn, TCTYPn. In future, these values will be dropped from manually specified headers automatically and replaced with values generated based on the Column objects.\r\n  ""Column objects."".format(keys))\r\n```\r\n\r\nWe see that this causes the above warning. The header still contains those keywords, and the columns don\'t (consistent with previous behavior):\r\n\r\n```\r\nIn [4]: print(hdu.header.tostring(sep=\'\\n\'))\r\n   ...: print(hdu.columns)\r\n   ...: \r\nXTENSION= \'BINTABLE\'           / binary table extension                         \r\nBITPIX  =                    8 / array data type                                \r\nNAXIS   =                    2 / number of array dimensions                     \r\nNAXIS1  =                    6 / length of dimension 1                          \r\nNAXIS2  =                    0 / length of dimension 2                          \r\nPCOUNT  =                    0 / number of group parameters                     \r\nGCOUNT  =                    1 / number of groups                               \r\nTFIELDS =                    2 / number of table fields                         \r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTCTYP2  = \'RA---TAN\'           / axis type for dimension 1                      \r\nTCRVL2  =               -999.0 / sky coordinates of 1st axis                    \r\nTTYPE1  = \'TIME    \'                                                            \r\nTFORM1  = \'1E      \'                                                            \r\nTUNIT1  = \'s       \'                                                            \r\nTTYPE2  = \'RAWX    \'                                                            \r\nTFORM2  = \'1I      \'                                                            \r\nTUNIT2  = \'pixel   \'                                                            \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'\r\n)\r\n```\r\n\r\nNow let\'s write out the file and read in back in:\r\n\r\n```python\r\nIn [5]: hdu.writeto(\'time.fits\', overwrite=True)\r\n   ...: \r\n   ...: hdu2 = fits.open(\'time.fits\')[1]\r\n   ...: \r\n\r\nIn [6]: print(hdu2.header.tostring(sep=\'\\n\'))\r\n   ...: print(hdu2.columns)\r\n   ...: \r\nXTENSION= \'BINTABLE\'           / binary table extension                         \r\nBITPIX  =                    8 / array data type                                \r\nNAXIS   =                    2 / number of array dimensions                     \r\nNAXIS1  =                    6 / length of dimension 1                          \r\nNAXIS2  =                    0 / length of dimension 2                          \r\nPCOUNT  =                    0 / number of group parameters                     \r\nGCOUNT  =                    1 / number of groups                               \r\nTFIELDS =                    2 / number of table fields                         \r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTCTYP2  = \'RA---TAN\'           / axis type for dimension 1                      \r\nTCRVL2  =               -999.0 / sky coordinates of 1st axis                    \r\nTTYPE1  = \'TIME    \'                                                            \r\nTFORM1  = \'1E      \'                                                            \r\nTUNIT1  = \'s       \'                                                            \r\nTTYPE2  = \'RAWX    \'                                                            \r\nTFORM2  = \'1I      \'                                                            \r\nTUNIT2  = \'pixel   \'                                                            \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'; coord_type = \'RA---TAN\'; coord_ref_value = -999.0\r\n)\r\n```\r\n\r\nAt this point, the new column attributes are picked up (as expected) and they are still in the header as everything is now in sync. No warning was emitted when reading a file.\r\n\r\nLet\'s just set a column attribute:\r\n\r\n```python\r\nIn [9]: hdu2.columns[1].coord_type = \'DEC--TAN\'\r\n\r\nIn [10]: hdu2.header[\'TCTYP2\']\r\nOut[10]: \'DEC--TAN\'\r\n```\r\n\r\nThe attributes in the header are now kept in sync and are not cleared by default when initializing from a header.'"
7156,294045730,duncanmmacleod,astrofrog,2018-02-02 22:40:51,2018-02-05 19:45:14,2018-02-05 14:28:58,closed,,v2.0.4,4,Affects-release;Bug;io.registry,https://api.github.com/repos/astropy/astropy/issues/7156,b'Improved inherited registration handling in astropy.io',"b""This PR patches the internal `_is_best_match` method to handle the case where multiple ancestors of a class are registered for a given format.\r\n\r\nThe modified logic nows returns `True` (best match) if\r\n\r\n1. the target class and registered class are the same\r\n1. the target class is not registered, and the registered class is the nearest registered ancestor of the target class\r\n\r\nThis means that if `Child` is not registered, but both `Parent` and `Grandparent` are, only `Parent` will be identified as the 'best match'. Without this patch, both `Parent` and `Grandparent` would be 'best match' resulting in a 'Format is ambiguous' `IORegistryError`."""
7153,293941111,astrofrog,saimn,2018-02-02 16:14:55,2018-02-05 17:20:55,2018-02-05 17:20:50,closed,,v3.0.0,14,Affects-dev;Bug;Critical;io.fits,https://api.github.com/repos/astropy/astropy/issues/7153,b'Possible fix for FITS regression with table keywords',"b'I\'m not too familiar with the FITS code base, but I was intrigued by https://github.com/astropy/astropy/issues/7145 so here\'s a possible fix, though if we agree on it it would need to be cleaned up and have tests etc. But since this is still new to me, feel free to close this.\r\n\r\nI started from @stscirij\'s example, shortened:\r\n\r\n```python\r\nimport astropy\r\nfrom astropy.io import fits\r\nimport numpy as np\r\n\r\ndef create_column_descriptions():\r\n    col = []\r\n    col.append(fits.Column(name=""TIME"", format=""1E"", unit=""s""))\r\n    col.append(fits.Column(name=""RAWX"", format=""1I"", unit=""pixel""))\r\n    cd = fits.ColDefs(col)\r\n\r\n    return cd\r\n\r\ndef create_header():\r\n    hdr = fits.Header()\r\n    hdr[\'RA\'] = (1.581250000000E+00, \'RA of reference aperture center \')\r\n    hdr[\'DEC\'] = (2.020277777778E+01, \'Declination of reference aperture center\')\r\n    hdr[\'TCTYP2\'] = (\'RA---TAN\', \'axis type for dimension 1\')\r\n    hdr[\'TCRVL2\'] = (-999.0, \'sky coordinates of 1st axis\')\r\n\r\n    return hdr\r\n\r\ncolumns = create_column_descriptions()\r\nheader = create_header()\r\n\r\nprint(""Header and columns before:"")\r\nprint(header)\r\nprint(columns)\r\n\r\nhdu = fits.BinTableHDU.from_columns(columns, header)\r\n\r\nprint(""Header and columns after:"")\r\nprint(hdu.header)\r\nprint(hdu.columns)\r\n```\r\n\r\nWith Astropy master this gives:\r\n\r\n```\r\nHeader and columns before:\r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTCTYP2  = \'RA---TAN\'           / axis type for dimension 1                      \r\nTCRVL2  =               -999.0 / sky coordinates of 1st axis                    \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'\r\n)\r\nHeader and columns after:\r\nXTENSION= \'BINTABLE\'           / binary table extension                         \r\nBITPIX  =                    8 / array data type                                \r\nNAXIS   =                    2 / number of array dimensions                    \r\nNAXIS1  =                    6 / length of dimension 1                          \r\nNAXIS2  =                    0 / length of dimension 2                          \r\nPCOUNT  =                    0 / number of group parameters                     \r\nGCOUNT  =                    1 / number of groups                               \r\nTFIELDS =                    2 / number of table fields                        \r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTTYPE1  = \'TIME    \'                                                            \r\nTFORM1  = \'1E      \'                                                           \r\nTUNIT1  = \'s       \'                                                            \r\nTTYPE2  = \'RAWX    \'                                                            \r\nTFORM2  = \'1I      \'                                                            \r\nTUNIT2  = \'pixel   \'                                                            \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'\r\n)\r\n```\r\n\r\nTechnically speaking, this is what the docstring of ``Header`` says it does:\r\n\r\n```\r\n            Header\r\n            keywords specifically related to defining the table structure (such\r\n            as the ""TXXXn"" keywords like TTYPEn) will be overridden by the\r\n            supplied column definitions, but all other informational and data\r\n            model-specific keywords are kept.\r\n```\r\n\r\nHowever, there are three possible meanings in my view for ``from_columns(columns, header)`` from a user point of view:\r\n\r\n1. Any column keywords in Header are ignored even the corresponding attributes are missing from ``columns``\r\n\r\n2. Any column keywords present in Header should override attributes in ``columns``\r\n\r\n3. Any column keywords present in Header for which the corresponding attribute in ``columns`` is ``None`` should be passed to ``columns``.\r\n\r\nThe current behavior is 1), and this breaks compatibility because more keywords are now recognized as column keywords.\r\n\r\nArguably, the docstring above could be interpreted as option 3) as well.\r\n\r\nThe present PR implements 3 with a twist: it copies over keywords that are in the header to the Column object **only** if this is one of the new keywords added in 3.0 and only if the Column doesn\'t already have that attribute set. With this, here is the result:\r\n\r\n```\r\nHeader and columns after:\r\nXTENSION= \'BINTABLE\'           / binary table extension                         \r\nBITPIX  =                    8 / array data type                                \r\nNAXIS   =                    2 / number of array dimensions                     \r\nNAXIS1  =                    6 / length of dimension 1                          \r\nNAXIS2  =                    0 / length of dimension 2                          \r\nPCOUNT  =                    0 / number of group parameters                     \r\nGCOUNT  =                    1 / number of groups                               \r\nTFIELDS =                    2 / number of table fields                         \r\nRA      =              1.58125 / RA of reference aperture center                \r\nDEC     =       20.20277777778 / Declination of reference aperture center       \r\nTTYPE1  = \'TIME    \'                                                            \r\nTFORM1  = \'1E      \'                                                            \r\nTUNIT1  = \'s       \'                                                            \r\nTTYPE2  = \'RAWX    \'                                                            \r\nTFORM2  = \'1I      \'                                                            \r\nTUNIT2  = \'pixel   \'                                                            \r\nTCTYP2  = \'RA---TAN\'                                                            \r\nTCRVL2  =               -999.0                                                  \r\nr\nColDefs(\r\n    name = \'TIME\'; format = \'1E\'; unit = \'s\'\r\n    name = \'RAWX\'; format = \'1I\'; unit = \'pixel\'; coord_type = \'RA---TAN\'; coord_ref_value = -999.0\r\n)\r\n```\r\n\r\nI personally think this makes more sense than the current behavior.\r\n\r\nNote that this can still break API in more subtle ways - for instance if a column is removed, then the matching TCTYP will be removed whereas it wasn\'t beforehand.\r\n\r\nIn future we could then move to having a keyword argument to better control the behavior between options 1, 2, and 3?\r\n\r\ncc @saimn @eteq @stscirij @aaryapatil \r\n\r\nEDIT: edited multiple times as I\'ve edited this PR'"
7148,293719141,mhvk,astrofrog,2018-02-01 23:19:12,2018-02-05 15:20:23,2018-02-05 14:28:10,closed,,v2.0.4,2,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/7148,b'Ensure that negative angles are rounded correctly to degrees.',b'fixes #7141'
7147,293717131,taldcroft,taldcroft,2018-02-01 23:10:06,2018-02-04 14:42:53,2018-02-02 00:48:46,closed,,v3.0.0,2,Bug;io.fits;table,https://api.github.com/repos/astropy/astropy/issues/7147,b'Fix bug in FITS column meta serialization: ignored without mixins',"b'The new machinery to serialize mixins along with column meta is being by-passed for a pure-columns (no mixins) table.\r\n\r\nHowever, the intent (in #6912) was to use this machinery if there is any column meta (`format`, `description`, or `meta`) that would be lost.  This PR fixes that.\r\n\r\nThis might address #6806, but takes an end-run around `TDISP`.'"
7145,293690641,stscirij,saimn,2018-02-01 21:31:33,2018-02-05 17:19:56,2018-02-05 17:19:56,closed,astrofrog,v3.0.0,21,Affects-dev;Bug;Critical;io.fits,https://api.github.com/repos/astropy/astropy/issues/7145,b'New FITS table column attributes break existing code',"b'Change in behaviour of binTableHDU.fromcolumns:\r\n\r\nVersion 2.0.3: passing a header containing keywords with names like ""TCRPX2"" to from_columns creates an hdu object with these keywords in the header\r\n\r\nVersion 3.dev: passing a header with such keywords results in them not making it to the header of the output\r\n\r\nThis code demonstrates:\r\n\r\n```python\r\n#! /usr/bin/env python\r\nimport astropy\r\nfrom astropy.io import fits\r\nimport numpy as np\r\n\r\ndef test_fromcolumns():\r\n    print(astropy.__version__)\r\n    cd = create_column_descriptions()\r\n    header = create_header()\r\n\r\n    print(""Header that is input to fits.BinTableHDU.from_columns:"")\r\n    print(header)\r\n\r\n    hdu = fits.BinTableHDU.from_columns(cd, header)\r\n\r\n    print(""Header of hdu object returned from fits.BinTableHDU.from_columns:"")\r\n    print(hdu.header)\r\n\r\n    return\r\n\r\ndef create_column_descriptions():\r\n    col = []\r\n    col.append(fits.Column(name=""TIME"", format=""1E"", unit=""s""))\r\n    col.append(fits.Column(name=""RAWX"", format=""1I"", unit=""pixel""))\r\n    col.append(fits.Column(name=""RAWY"", format=""1I"", unit=""pixel""))\r\n    cd = fits.ColDefs(col)\r\n\r\n    return cd\r\n\r\ndef create_header():\r\n    hdr = fits.Header()\r\n    hdr[\'RA\'] = (1.581250000000E+00, \'RA of reference aperture center \')\r\n    hdr[\'DEC\'] = (2.020277777778E+01, \'Declination of reference aperture center\')\r\n    hdr[\'TCTYP2\'] = (\'RA---TAN\', \'axis type for dimension 1\')\r\n    hdr[\'TCTYP3\'] = (\'ANGLE   \', \'axis type for dimension 2\')\r\n    hdr[\'TCRVL2\'] = (-999.0, \'sky coordinates of 1st axis\')\r\n    hdr[\'TCRVL3\'] = (-999.0, \'sky coordinates of 2nd axis\')\r\n    hdr[\'TCRPX2\'] = (1.0, \'axis1 pixel of tangent plane direction\')\r\n    hdr[\'TCRPX3\'] = (1.0, \'axis2 pixel of tangent plane direction\')\r\n    hdr[\'TALEN2\'] = (16384, \'length of axis 1\')\r\n    hdr[\'TALEN3\'] = (1024, \'length of axis 2\')\r\n    hdr[\'TC2_2\'] = (0.0, \'partial of first axis coordinate w.r.t. x\')\r\n    hdr[\'TC2_3\'] = (0.0, \'partial of first axis coordinate w.r.t. y\')\r\n    hdr[\'TC3_2\'] = (0.0, \'partial of second axis coordinate w.r.t. x\')\r\n    hdr[\'TC3_3\'] = (0.0, \'partial of second axis coordinate w.r.t. y\')\r\n    hdr[\'TCUNI2\'] = (\'angstrom\', \'units of first coordinate value\')\r\n    hdr[\'TCUNI3\'] = (\'deg     \', \'units of second coordinate value\')\r\n\r\n    return hdr\r\n\r\n```\r\n\r\nEdit: Added syntax highlighting.'"
7141,293350164,jrthorstensen,astrofrog,2018-01-31 23:29:35,2018-02-05 14:28:10,2018-02-05 14:28:10,closed,,,3,Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/7141,b'Bug in rounded negative sexagesimal output',"b""There is a bug in sexagesimal_to_string in astropy.coordinates.angle_utilities.\r\nIf a coordinate is negative, and is rounded by carrying a 60 up to the next field, the\r\nsign is not handled correctly.   For example:\r\n```python\r\n>>> from astropy import coordinates as coo\r\n\r\n>>> coo.angle_utilities.sexagesimal_to_string((-0.,59,59))\r\nu'-0:59:59'\r\n>>> coo.angle_utilities.sexagesimal_to_string((-0.,59,59),precision=0)\r\nu'1:00:00'\r\n>>> coo.angle_utilities.sexagesimal_to_string((-1.,59,59),precision=0)\r\nu'0:00:00'\r\n>>> coo.angle_utilities.sexagesimal_to_string((-2.,59,59),precision=0)\r\nu'-1:00:00'\r\n```\r\nApparently the value of the 'degrees' field is incremented even if it's negative.\r\n\r\nThis can be handled by splitting out the sign explicitly and making everything\r\npositive at first (extending what is done presently with the minute and second fields\r\nto the degree field as well), doing the formatting, and then tacking on the minus or \r\nplus sign at the end as needed.  \r\n\r\nIt might be worth carrying a sign explicitly in the sexagesimal representation.  This\r\nother problem then could be avoided:\r\n```python\r\n>>> coo.angle_utilities.sexagesimal_to_string((-0,30,30),precision=0)\r\nu'0:30:30'\r\n```\r\n... the integer -0 has the sign stripped away.\r\n\r\nEDIT: Code formatting."""
7132,292719344,astrofrog,astrofrog,2018-01-30 09:58:01,2018-01-30 18:49:22,2018-01-30 14:01:55,closed,,v2.0.4,4,Bug;visualization.wcsaxes,https://api.github.com/repos/astropy/astropy/issues/7132,b'Make sure local matplotlibrc files are ignored for WCSAxes tests',"b""In particular those that don't use pytest-mpl but use Matplotlib (pytest-mpl already ignores local matplotlibrc files)\r\n\r\n@pllim - this will fix four of the issues you were seeing with RC2:\r\n\r\nFixes https://github.com/astropy/astropy/issues/6309\r\nFixes https://github.com/astropy/astropy/issues/7130\r\n\r\n@bsipocz - I'm milestoning this as 2.0.4 as it should be backported to 2.0.x but if we can get this in 3.0 that would be great (I'll leave it up to you)"""
7131,292540319,pllim,astrofrog,2018-01-29 19:58:50,2018-01-30 18:53:41,2018-01-29 23:50:53,closed,,v3.0.0,3,Bug;modeling;no-changelog-entry-needed;platform-i386;testing,https://api.github.com/repos/astropy/astropy/issues/7131,b'Fix blackbody overflow bug in 32-bit',"b'Fix #7129 \r\n\r\nProbably not worth backporting to 3.0? If you feel otherwise, feel free to re-milestone.'"
7129,292237645,astrofrog,astrofrog,2018-01-28 20:56:26,2018-01-29 23:50:53,2018-01-29 23:50:53,closed,pllim,,6,Bug;modeling;platform-i386;testing,https://api.github.com/repos/astropy/astropy/issues/7129,b'Test failure with test_blackbody_scipy on 32-bit',"b'I\'m seeing the following failure on the new 32-bit CircleCI set-up (#7126):\r\n\r\n```python\r\n_____________________________ test_blackbody_scipy _____________________________\r\n[gw2] linux -- Python 3.6.4 /opt/python/cp36-cp36m/bin/python\r\n\r\n    @pytest.mark.skipif(\'not HAS_SCIPY\')\r\n    def test_blackbody_scipy():\r\n        """"""Test Planck function.\r\n    \r\n        .. note:: Needs ``scipy`` to work.\r\n    \r\n        """"""\r\n        flux_unit = u.Watt / (u.m ** 2 * u.um)\r\n        wave = np.logspace(0, 8, 100000) * u.AA\r\n        temp = 100. * u.K\r\n        with np.errstate(all=\'ignore\'):\r\n            bb_nu = blackbody_nu(wave, temp) * u.sr\r\n        flux = bb_nu.to(flux_unit, u.spectral_density(wave)) / u.sr\r\n    \r\n        lum = wave.to(u.um)\r\n        intflux = integrate.trapz(flux.value, x=lum.value)\r\n        ans = const.sigma_sb * temp ** 4 / np.pi\r\n>       np.testing.assert_allclose(intflux, ans.value, rtol=0.01)  # 1% accuracy\r\n\r\nastropy/modeling/tests/test_blackbody.py:73: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nx_id = True, y_id = False, hasval = \'nan\'\r\n\r\n    def chk_same_position(x_id, y_id, hasval=\'nan\'):\r\n        """"""Handling nan/inf: check that x and y have the nan/inf at the same\r\n            locations.""""""\r\n        try:\r\n            assert_array_equal(x_id, y_id)\r\n        except AssertionError:\r\n            msg = build_err_msg([x, y],\r\n                                err_msg + \'\\nx and y %s location mismatch:\'\r\n                                % (hasval), verbose=verbose, header=header,\r\n                                names=(\'x\', \'y\'), precision=precision)\r\n>           raise AssertionError(msg)\r\nE           AssertionError: \r\nE           Not equal to tolerance rtol=0.01, atol=0\r\nE           \r\nE           x and y nan location mismatch:\r\nE            x: array(nan)\r\nE            y: array(1.804934)\r\n\r\n/opt/python/cp36-cp36m/lib/python3.6/site-packages/numpy/testing/nose_tools/utils.py:706: AssertionError\r\n```\r\n\r\n@pllim - do you fancy investigating this? If you don\'t have time, I can take a look.'"
7128,292237528,astrofrog,astrofrog,2018-01-28 20:54:41,2018-01-30 15:05:56,2018-01-30 15:05:56,closed,saimn,,1,Bug;platform-i386;table;testing,https://api.github.com/repos/astropy/astropy/issues/7128,b'Test failure with astropy.table test_stats on 32-bit',"b""I'm seeing the following failure on the new 32-bit CircleCI set-up (#7126):\r\n\r\n```\r\n__________________________________ test_stats __________________________________\r\n[gw0] linux -- Python 3.6.4 /opt/python/cp36-cp36m/bin/python\r\n\r\ncapsys = <_pytest.capture.CaptureFixture object at 0xbf98d06c>\r\n\r\n    def test_stats(capsys):\r\n        showtable.main([os.path.join(FITS_ROOT, 'data/table.fits'), '--stats'])\r\n        out, err = capsys.readouterr()\r\n        if NUMPY_LT_1_14:\r\n            expected = ('<Table length=3>{0}'\r\n                        ' name    mean    std   min  max {0}'\r\n                        '------ ------- ------- ---- ----{0}'\r\n                        'target      --      --   --   --{0}'\r\n                        ' V_mag 12.8667 1.72111 11.1 15.2{0}')\r\n        else:\r\n            expected = ('<Table length=3>{0}'\r\n                        ' name     mean      std    min  max {0}'\r\n                        '------ --------- --------- ---- ----{0}'\r\n                        'target        --        --   --   --{0}'\r\n                        ' V_mag 12.866668 1.7211105 11.1 15.2{0}')\r\n    \r\n>       assert out == expected.format(os.linesep)\r\nE       AssertionError: assert '<Table lengt...5 11.1 15.2\\n' == '<Table length...5 11.1 15.2\\n'\r\nE         Skipping 133 identical leading characters in diff, use -v to show\r\nE         - g 12.866666 1.7211105 11.1 15.2\r\nE         ?           ^\r\nE         + g 12.866668 1.7211105 11.1 15.2\r\nE         ?           ^\r\n\r\nastropy/table/tests/test_showtable.py:45: AssertionError\r\n```\r\n\r\n@saimn - since you added this functionality, how do you think we should fix it? We could do something hacky like ``out = out.replace('12.866666', '12.866668')`` before the assert with a comment that this is to catch 32-bit differences?"""
7127,292236922,astrofrog,astrofrog,2018-01-28 20:47:01,2018-01-30 15:05:56,2018-01-30 15:05:56,closed,taldcroft,,3,Bug;io.ascii;platform-i386,https://api.github.com/repos/astropy/astropy/issues/7127,b'Test failure with test_data_out_of_range on 32-bit ',"b'The 32-bit CircleCI tests in https://github.com/astropy/astropy/pull/7126 have shown a new issue/test failure with the fast reader in io.ascii\r\n\r\nClick \'details\' show the test log: <details>\r\n```\r\n_______________________ test_data_out_of_range[False-1] ________________________\r\n[gw2] linux -- Python 3.6.4 /opt/python/cp36-cp36m/bin/python\r\n\r\nparallel = False, reader = 1\r\n\r\n    @pytest.mark.parametrize(\'reader\', [0, 1, 2])\r\n    # catch Windows environment since we cannot use _read() with custom fast_reader\r\n    @pytest.mark.parametrize(""parallel"", [False,\r\n        pytest.param(True, marks=pytest.mark.xfail(os.name == \'nt\', reason=""Multiprocessing is currently unsupported on Windows""))])\r\n    def test_data_out_of_range(parallel, reader):\r\n        """"""\r\n        Numbers with exponents beyond float64 range (|~4.94e-324 to 1.7977e+308|)\r\n        shall be returned as 0 and +-inf respectively by the C parser, just like\r\n        the Python parser.\r\n        Test fast converter only to nominal accuracy.\r\n        """"""\r\n        # Python reader and strtod() are expected to return precise results\r\n        rtol = 1.e-30\r\n        if reader > 1:\r\n            rtol = 1.e-15\r\n        # passing fast_reader dict with parametrize does not work!\r\n        if reader > 0:\r\n            fast_reader = {\'parallel\': parallel, \'use_fast_converter\': reader > 1}\r\n        else:\r\n            fast_reader = False\r\n        if parallel:\r\n            if reader < 1:\r\n                pytest.skip(""Multiprocessing only available in fast reader"")\r\n            elif TRAVIS:\r\n                pytest.xfail(""Multiprocessing can sometimes fail on Travis CI"")\r\n    \r\n        fields = [\'10.1E+199\', \'3.14e+313\', \'2048e+306\', \'0.6E-325\', \'-2.e345\']\r\n        values = np.array([1.01e200, np.inf, np.inf, 0.0, -np.inf])\r\n        t = ascii.read(StringIO(\' \'.join(fields)), format=\'no_header\', guess=False,\r\n                       fast_reader=fast_reader)\r\n        read_values = np.array([col[0] for col in t.itercols()])\r\n        assert_almost_equal(read_values, values, rtol=rtol, atol=1.e-324)\r\n    \r\n        # test some additional corner cases\r\n        fields = [\'.0101E202\', \'0.000000314E+314\', \'1777E+305\', \'-1799E+305\', \'0.2e-323\',\r\n                   \'2500e-327\', \' 0.0000000000000000000001024E+330\']\r\n        values = np.array([1.01e200, 3.14e307, 1.777e308, -np.inf, 0.0, 4.94e-324, 1.024e308])\r\n        t = ascii.read(StringIO(\' \'.join(fields)), format=\'no_header\', guess=False,\r\n                       fast_reader=fast_reader)\r\n        read_values = np.array([col[0] for col in t.itercols()])\r\n>       assert_almost_equal(read_values, values, rtol=rtol, atol=1.e-324)\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:997: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/io/ascii/tests/common.py:42: in assert_almost_equal\r\n    assert np.allclose(a, b, **kwargs)\r\n/opt/python/cp36-cp36m/lib/python3.6/site-packages/numpy/core/numeric.py:2256: in allclose\r\n    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\na = array([\'1.01e+200\', \'3.14e+307\', \'1.777e+308\', \'-inf\', \'0.2e-323\',\r\n       \'5e-324\', \'1.024e+308\'], dtype=\'<U32\')\r\nb = array([1.010e+200, 3.140e+307, 1.777e+308,       -inf, 0.000e+000,\r\n       4.941e-324, 1.024e+308])\r\nrtol = 1e-30, atol = 0.0, equal_nan = False\r\n\r\n    def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):\r\n        """"""\r\n        Returns a boolean array where two arrays are element-wise equal within a\r\n        tolerance.\r\n    \r\n        The tolerance values are positive, typically very small numbers.  The\r\n        relative difference (`rtol` * abs(`b`)) and the absolute difference\r\n        `atol` are added together to compare against the absolute difference\r\n        between `a` and `b`.\r\n    \r\n        Parameters\r\n        ----------\r\n        a, b : array_like\r\n            Input arrays to compare.\r\n        rtol : float\r\n            The relative tolerance parameter (see Notes).\r\n        atol : float\r\n            The absolute tolerance parameter (see Notes).\r\n        equal_nan : bool\r\n            Whether to compare NaN\'s as equal.  If True, NaN\'s in `a` will be\r\n            considered equal to NaN\'s in `b` in the output array.\r\n    \r\n        Returns\r\n        -------\r\n        y : array_like\r\n            Returns a boolean array of where `a` and `b` are equal within the\r\n            given tolerance. If both `a` and `b` are scalars, returns a single\r\n            boolean value.\r\n    \r\n        See Also\r\n        --------\r\n        allclose\r\n    \r\n        Notes\r\n        -----\r\n        .. versionadded:: 1.7.0\r\n    \r\n        For finite values, isclose uses the following equation to test whether\r\n        two floating point values are equivalent.\r\n    \r\n         absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\r\n    \r\n        The above equation is not symmetric in `a` and `b`, so that\r\n        `isclose(a, b)` might be different from `isclose(b, a)` in\r\n        some rare cases.\r\n    \r\n        Examples\r\n        --------\r\n        >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])\r\n        array([True, False])\r\n        >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])\r\n        array([True, True])\r\n        >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])\r\n        array([False, True])\r\n        >>> np.isclose([1.0, np.nan], [1.0, np.nan])\r\n        array([True, False])\r\n        >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\r\n        array([True, True])\r\n        """"""\r\n        def within_tol(x, y, atol, rtol):\r\n            with errstate(invalid=\'ignore\'):\r\n                return less_equal(abs(x-y), atol + rtol * abs(y))\r\n    \r\n        x = asanyarray(a)\r\n        y = asanyarray(b)\r\n    \r\n        # Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).\r\n        # This will cause casting of x later. Also, make sure to allow subclasses\r\n        # (e.g., for numpy.ma).\r\n        dt = multiarray.result_type(y, 1.)\r\n        y = array(y, dtype=dt, copy=False, subok=True)\r\n    \r\n>       xfin = isfinite(x)\r\nE       TypeError: ufunc \'isfinite\' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule \'\'safe\'\'\r\n\r\n/opt/python/cp36-cp36m/lib/python3.6/site-packages/numpy/core/numeric.py:2332: TypeError\r\n________________________ test_data_out_of_range[True-1] ________________________\r\n[gw0] linux -- Python 3.6.4 /opt/python/cp36-cp36m/bin/python\r\n\r\nparallel = True, reader = 1\r\n\r\n    @pytest.mark.parametrize(\'reader\', [0, 1, 2])\r\n    # catch Windows environment since we cannot use _read() with custom fast_reader\r\n    @pytest.mark.parametrize(""parallel"", [False,\r\n        pytest.param(True, marks=pytest.mark.xfail(os.name == \'nt\', reason=""Multiprocessing is currently unsupported on Windows""))])\r\n    def test_data_out_of_range(parallel, reader):\r\n        """"""\r\n        Numbers with exponents beyond float64 range (|~4.94e-324 to 1.7977e+308|)\r\n        shall be returned as 0 and +-inf respectively by the C parser, just like\r\n        the Python parser.\r\n        Test fast converter only to nominal accuracy.\r\n        """"""\r\n        # Python reader and strtod() are expected to return precise results\r\n        rtol = 1.e-30\r\n        if reader > 1:\r\n            rtol = 1.e-15\r\n        # passing fast_reader dict with parametrize does not work!\r\n        if reader > 0:\r\n            fast_reader = {\'parallel\': parallel, \'use_fast_converter\': reader > 1}\r\n        else:\r\n            fast_reader = False\r\n        if parallel:\r\n            if reader < 1:\r\n                pytest.skip(""Multiprocessing only available in fast reader"")\r\n            elif TRAVIS:\r\n                pytest.xfail(""Multiprocessing can sometimes fail on Travis CI"")\r\n    \r\n        fields = [\'10.1E+199\', \'3.14e+313\', \'2048e+306\', \'0.6E-325\', \'-2.e345\']\r\n        values = np.array([1.01e200, np.inf, np.inf, 0.0, -np.inf])\r\n        t = ascii.read(StringIO(\' \'.join(fields)), format=\'no_header\', guess=False,\r\n                       fast_reader=fast_reader)\r\n        read_values = np.array([col[0] for col in t.itercols()])\r\n        assert_almost_equal(read_values, values, rtol=rtol, atol=1.e-324)\r\n    \r\n        # test some additional corner cases\r\n        fields = [\'.0101E202\', \'0.000000314E+314\', \'1777E+305\', \'-1799E+305\', \'0.2e-323\',\r\n                   \'2500e-327\', \' 0.0000000000000000000001024E+330\']\r\n        values = np.array([1.01e200, 3.14e307, 1.777e308, -np.inf, 0.0, 4.94e-324, 1.024e308])\r\n        t = ascii.read(StringIO(\' \'.join(fields)), format=\'no_header\', guess=False,\r\n                       fast_reader=fast_reader)\r\n        read_values = np.array([col[0] for col in t.itercols()])\r\n>       assert_almost_equal(read_values, values, rtol=rtol, atol=1.e-324)\r\n\r\nastropy/io/ascii/tests/test_c_reader.py:997: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nastropy/io/ascii/tests/common.py:42: in assert_almost_equal\r\n    assert np.allclose(a, b, **kwargs)\r\n/opt/python/cp36-cp36m/lib/python3.6/site-packages/numpy/core/numeric.py:2256: in allclose\r\n    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\na = array([\'1.01e+200\', \'3.14e+307\', \'1.777e+308\', \'-inf\', \'0.2e-323\',\r\n       \'5e-324\', \'1.024e+308\'], dtype=\'<U32\')\r\nb = array([1.010e+200, 3.140e+307, 1.777e+308,       -inf, 0.000e+000,\r\n       4.941e-324, 1.024e+308])\r\nrtol = 1e-30, atol = 0.0, equal_nan = False\r\n\r\n    def isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False):\r\n        """"""\r\n        Returns a boolean array where two arrays are element-wise equal within a\r\n        tolerance.\r\n    \r\n        The tolerance values are positive, typically very small numbers.  The\r\n        relative difference (`rtol` * abs(`b`)) and the absolute difference\r\n        `atol` are added together to compare against the absolute difference\r\n        between `a` and `b`.\r\n    \r\n        Parameters\r\n        ----------\r\n        a, b : array_like\r\n            Input arrays to compare.\r\n        rtol : float\r\n            The relative tolerance parameter (see Notes).\r\n        atol : float\r\n            The absolute tolerance parameter (see Notes).\r\n        equal_nan : bool\r\n            Whether to compare NaN\'s as equal.  If True, NaN\'s in `a` will be\r\n            considered equal to NaN\'s in `b` in the output array.\r\n    \r\n        Returns\r\n        -------\r\n        y : array_like\r\n            Returns a boolean array of where `a` and `b` are equal within the\r\n            given tolerance. If both `a` and `b` are scalars, returns a single\r\n            boolean value.\r\n    \r\n        See Also\r\n        --------\r\n        allclose\r\n    \r\n        Notes\r\n        -----\r\n        .. versionadded:: 1.7.0\r\n    \r\n        For finite values, isclose uses the following equation to test whether\r\n        two floating point values are equivalent.\r\n    \r\n         absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\r\n    \r\n        The above equation is not symmetric in `a` and `b`, so that\r\n        `isclose(a, b)` might be different from `isclose(b, a)` in\r\n        some rare cases.\r\n    \r\n        Examples\r\n        --------\r\n        >>> np.isclose([1e10,1e-7], [1.00001e10,1e-8])\r\n        array([True, False])\r\n        >>> np.isclose([1e10,1e-8], [1.00001e10,1e-9])\r\n        array([True, True])\r\n        >>> np.isclose([1e10,1e-8], [1.0001e10,1e-9])\r\n        array([False, True])\r\n        >>> np.isclose([1.0, np.nan], [1.0, np.nan])\r\n        array([True, False])\r\n        >>> np.isclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)\r\n        array([True, True])\r\n        """"""\r\n        def within_tol(x, y, atol, rtol):\r\n            with errstate(invalid=\'ignore\'):\r\n                return less_equal(abs(x-y), atol + rtol * abs(y))\r\n    \r\n        x = asanyarray(a)\r\n        y = asanyarray(b)\r\n    \r\n        # Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).\r\n        # This will cause casting of x later. Also, make sure to allow subclasses\r\n        # (e.g., for numpy.ma).\r\n        dt = multiarray.result_type(y, 1.)\r\n        y = array(y, dtype=dt, copy=False, subok=True)\r\n    \r\n>       xfin = isfinite(x)\r\nE       TypeError: ufunc \'isfinite\' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule \'\'safe\'\'\r\n```\r\n</details>\r\n\r\n\r\nI investigated this and the issue is that the value ``0.2e-323`` is not getting converted to a float on 32-bit (the conversion fails and it remains a string, causing the type error above). It turns out that in that 32-bit Docker image, the following code:\r\n \r\n```c\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <errno.h>\r\n\r\nint main() {\r\n  char *tmp;\r\n  strtod(""0.2e-323"", &tmp);\r\n  printf(""errno=%d ERANGE=%d EDOM=%d\\n"", errno, ERANGE, EDOM);\r\n}\r\n```\r\n\r\nreturns:\r\n\r\n```\r\nerrno=33 ERANGE=34 EDOM=33\r\n```\r\n\r\nwhereas on other machines it is:\r\n\r\n```\r\nerrno=34 ERANGE=34 EDOM=33\r\n```\r\n\r\nThis means that on other machines, the error is an ``ERANGE`` and the value is just set to zero, whereas on the 32-bit machine, the error is ``EDOM``, which causes a ``ValueError`` to be raised here: https://github.com/astropy/astropy/blob/master/astropy/io/ascii/cparser.pyx#L735\r\n\r\nThere are several solutions here:\r\n\r\n* Skip that part of the test on CircleCI\r\n\r\n* Skip that part of the test on 32-bit systems\r\n\r\n* Change the value so it doesn\'t cause an error on the 32-bit machine\r\n\r\nFor anyone who wants to reproduce this, you can use the docker image ``quay.io/pypa/manylinux1_i686``\r\n\r\n@taldcroft - what do you think would be best?'"
7107,290295130,taldcroft,astrofrog,2018-01-21 18:42:50,2018-01-30 12:19:41,2018-01-30 12:19:12,closed,,v3.0.0,19,Affects-release;Bug;Ready-for-final-review;table,https://api.github.com/repos/astropy/astropy/issues/7107,b'Fix get and set of table Row when using multiple column names',"b'Fixes #7049.\r\n\r\nFor now I milestoned this for 3.1 because there is no 3.0.1 in master CHANGES.rst.  \r\n\r\nFrom a functional perspective I think this could be backported to LTS, but it is slightly a pain because I factored out a new helper method and it has now a `isinstance(.., str)` instead of `isinstance(.., six.string_types)`.'"
7102,290127327,pllim,bsipocz,2018-01-19 22:32:25,2018-01-22 17:03:18,2018-01-19 23:36:16,closed,,v2.0.4,2,Bug;Docs;Release;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/7102,b'Move version.x dev stuff farther down',"b'This is because doing the "".dev"" stuff too early in `1.2.x` branch causes headache when tagged `1.2.2` version has problems and needs to be fixed. I had to resort to https://stackoverflow.com/questions/32315156/how-to-inject-a-commit-between-some-two-arbitrary-commits-in-the-past before I can retag. With this change, hopefully that is no longer necessary.\r\n\r\np.s. Forgot `[docs only]` in the commit. Sorry!'"
7091,289655512,drdavella,bsipocz,2018-01-18 14:50:48,2018-01-18 16:18:04,2018-01-18 16:16:39,closed,,v3.0.0,5,Bug;io.misc.asdf;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/7091,b'Fix failures caused by ASDF test API change',b'This fixes #7088.'
7081,288685286,eteq,bsipocz,2018-01-15 18:44:02,2018-01-22 17:41:05,2018-01-22 17:41:05,closed,eteq,v2.0.4,1,Affects-release;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/7081,b'CI broken by sites with non-ascii characters',"b'In an unexpected interaction, the remote-data builds have been broken due to several merges made in https://github.com/astropy/astropy-data that added sites with special characters - see https://travis-ci.org/astropy/astropy/jobs/328969204 for an example. Good news is: I think I see the problem and will try to have a fix later today. '"
7069,287825216,Cadair,bsipocz,2018-01-11 15:44:18,2018-01-22 17:45:15,2018-01-22 17:45:15,closed,,v3.0.0,7,Bug;Critical;coordinates,https://api.github.com/repos/astropy/astropy/issues/7069,b'Changes to Coordinates broke SunPy',"b""I am attempting to work out a minimal failing example for this but:\r\n```\r\nsunpy/coordinates/__init__.py:6: in <module>\r\n    from .ephemeris import *\r\nsunpy/coordinates/ephemeris.py:106: in <module>\r\n    get_earth(_time_first_rotation).hcrs.cartesian.transform(_SUN_DETILT_MATRIX) \\\r\nsunpy/coordinates/ephemeris.py:73: in get_earth\r\n    earth = SkyCoord(0*u.deg, earth.lat, earth.radius, frame=earth)\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:225: in __init__\r\n    kwargs = self._parse_inputs(args, kwargs)\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:384: in _parse_inputs\r\n    valid_kwargs.update(_get_representation_attrs(frame, units, kwargs))\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:2075: in _get_representation_attrs\r\n    differential_type = frame._representation['s'].attr_classes\r\nE   AttributeError: 'NoneType' object has no attribute 'attr_classes'\r\n```\r\nhttps://travis-ci.org/sunpy/sunpy/jobs/327706590#L2349"""
7059,287298828,adrn,eteq,2018-01-10 02:49:06,2018-01-15 18:47:07,2018-01-15 18:47:07,closed,,v3.0.0,6,Affects-dev;Bug;coordinates,https://api.github.com/repos/astropy/astropy/issues/7059,b'Enable velocities in SkyOffsetFrame classes',"b""I just tried to use `SkyOffsetFrame` to transform some coordinates with associated proper motions and got hit with a `NotImplementedError` - we forgot to fix this for v3.0, or make an issue...oops!\r\n\r\nHere's a quick attempt at enabling this. I think it actually works out of the box (by removing the `raise` we added for v2.0), but to get the velocity component names to appear correctly I (controversially) removed a large section of code that appears unnecessary, but @eteq probably had a reason for it. That code replaces the frame specific names for lon/lat with lon and lat. But why not just revert back to the baseframe defaults? That is what removing the logic below does."""
7051,286740268,bengranett,bsipocz,2018-01-08 13:09:33,2018-01-22 19:15:06,2018-01-22 19:15:06,closed,,v2.0.4,23,Bug;Critical;Upstream Fix Required;coordinates,https://api.github.com/repos/astropy/astropy/issues/7051,b'numpy TypeError on coordinate transform (TypeError: For this input type lists must contain either int or Ellipsis)',"b'A numpy TypeError is raised when doing a coordinate transformation on an array.   This appeared with numpy v 1.14.0.  The following code gives the error, copied below.\r\npython version is 2.7\r\nastropy version is 2.0.3\r\n\r\n```python\r\nimport numpy as np\r\nimport astropy\r\nfrom astropy import coordinates, units\r\n\r\nprint ""numpy v"", np.__version__\r\nprint ""astropy v"", astropy.__version__\r\n\r\nc = coordinates.SkyCoord(ra=[10, 11, 12, 13]*units.degree, dec=[41, -5, 42, 0]*units.degree)\r\nprint c.transform_to(\'galactic\')\r\n```\r\n\r\n```\r\nnumpy v 1.14.0\r\nastropy v 2.0.3\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/astropy/coordinates/sky_coordinate.py"", line 482, in transform_to\r\n    new_coord = trans(self.frame, generic_frame)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/astropy/coordinates/transformations.py"", line 1314, in __call__\r\n    curr_coord = t(curr_coord, curr_toframe)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/astropy/coordinates/transformations.py"", line 1232, in __call__\r\n    newrep = self._apply_transform(fromcoord, M, None)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/astropy/coordinates/transformations.py"", line 1005, in _apply_transform\r\n    rep = rep.transform(matrix)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/astropy/coordinates/representation.py"", line 1115, in transform\r\n    newxyz = np.einsum(\'...ij,j...->i...\', matrix, oldxyz.value)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/numpy/core/einsumfunc.py"", line 1087, in einsum\r\n    einsum_call=True)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/numpy/core/einsumfunc.py"", line 688, in einsum_path\r\n    input_subscripts, output_subscript, operands = _parse_einsum_input(operands)\r\n  File ""/Users/ben/.virtualenvs/test/lib/python2.7/site-packages/numpy/core/einsumfunc.py"", line 432, in _parse_einsum_input\r\n    raise TypeError(""For this input type lists must contain ""\r\nTypeError: For this input type lists must contain either int or Ellipsis\r\n```\r\n  '"
7049,286302205,astrofrog,astrofrog,2018-01-05 14:23:43,2018-01-30 12:19:12,2018-01-30 12:19:12,closed,,,6,Bug;table,https://api.github.com/repos/astropy/astropy/issues/7049,b'Incorrect result when slicing a row by multiple columns',"b""In the following example:\r\n\r\n```\r\nIn [1]: from astropy.table import Table\r\n\r\nIn [2]: t = Table()\r\n\r\nIn [3]: t['a'] = [1,2,3]\r\n\r\nIn [4]: t['b'] = [3,4,5]\r\n\r\nIn [5]: row = t[0]\r\n\r\nIn [6]: row['a', 'b']\r\nOut[6]: \r\n<Column name='a' dtype='int64' length=3>\r\n1\r\n2\r\n3\r\n```\r\n\r\nI would either expect an error for ``row['a','b']`` or I would expect the same as:\r\n\r\n```\r\nIn [7]: t['a', 'b'][0]\r\nOut[7]: \r\n<Row index=0>\r\n  a     b  \r\nint64 int64\r\n----- -----\r\n    1     3\r\n```"""
7026,284199868,mhvk,bsipocz,2017-12-22 16:16:25,2017-12-22 19:56:15,2017-12-22 18:43:28,closed,,v2.0.4,4,Affects-release;Bug;no-changelog-entry-needed;testing;units,https://api.github.com/repos/astropy/astropy/issues/7026,b'Add lcm and gcd to unsupported ufuncs.',"b'They only work on integers, which make little sense for Quantity.\r\n\r\nfixes #6988'"
7023,284032258,mhvk,eteq,2017-12-21 23:23:03,2017-12-22 13:43:58,2017-12-22 05:13:06,closed,,v2.0.4,1,Bug;no-changelog-entry-needed;testing,https://api.github.com/repos/astropy/astropy/issues/7023,b'Clear the cache before testing using a local IERS_A copy.',"b'Fixes #5131\r\n\r\nNot entirely sure why I wrote the test in the first place, but now at least it will work...'"
7000,283041475,e-koch,bsipocz,2017-12-18 22:24:12,2018-01-24 19:18:59,2018-01-24 19:16:35,closed,,v2.0.4,7,Affects-release;Bug;Ready-for-final-review;convolution,https://api.github.com/repos/astropy/astropy/issues/7000,b'Fix IndexError in convolve_fft with preserve_nan',b'Setting `preserve_nan=True` in `convolve_fft` gives an IndexError when using numpy 1.13. The error occurs when the shapes of `rifft` and `nanmaskarray` are different:\r\n```\r\nrifft[nanmaskarray] = np.nan\r\n```\r\nI think this just raised a bunch of warnings in numpy <1.13.\r\n\r\nI added the `preserve_nan=True` option to the existing tests.\r\n\r\nPing @keflavich '
6993,282448911,agowardhan,saimn,2017-12-15 14:44:22,2018-01-24 07:43:29,2018-01-24 07:43:29,closed,,v2.0.4,4,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6993,b'Fix fitsdiff with a directory argument',b'Added unit test for fitsdiff and change to changelog.rst [#6834]\r\n\r\nEDIT: Fix #6760'
6987,282217048,pllim,eteq,2017-12-14 19:44:02,2018-01-10 20:05:59,2017-12-23 03:41:22,closed,,v2.0.4,6,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/6987,b'Check mirror cache before attempting download',b'Fix #6982 '
6982,281851727,adrn,eteq,2017-12-13 18:32:29,2017-12-23 03:41:22,2017-12-23 03:41:22,closed,pllim,,1,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/6982,b'download_file() bug with cached results from a mirror',"b""This is something I stumbled on when I was having connection issues with data.astropy.org but not the mirror: when using `download_file()`, my download times were very long because it tries to connect several times before giving up and switching to the mirror. When it then finally decides to use the mirror, it works, downloads the file, and caches it. But because the file gets cached using the *mirror* url, if I run `download_file()` again with the same exact filename, it won't read it from the cache because the first URL it tries is with data.astropy.org, so then the same timeout issues happen again.\r\n\r\nThis isn't a serious issue, because I suspect the failure mode is pretty rare: this will only happen if connections to data.astropy.org timeout. If the connection is explicitly blocked, it should quickly fall back to the mirror. But it should probably first check the cache for all possible URLs before doing any internet connection.\r\n\r\ncc @saimn @pllim """
6976,281530548,ricardogando,saimn,2017-12-12 20:42:47,2017-12-21 14:09:33,2017-12-21 14:06:24,closed,,v2.0.4,8,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6976,b'Fixed tabledump file name issue [#6937]',b'First contribution. Would check if regression test makes sense.\r\n\r\nEDIT: Fix #6937'
6969,281155427,larrybradley,bsipocz,2017-12-11 20:24:57,2017-12-12 15:31:05,2017-12-12 10:59:30,closed,,v2.0.3,8,Affects-release;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/6969,b'fits2bitmap updates',"b""This PR addresses #6960, which is due to a bug `matplotlib <= 2.0.0`.\r\n\r\nThe test failure reported in #6960 with `mpl 2.0.0` is due to a `mpl` bug where `imsave` was ignoring the `origin` option for PNG files (https://github.com/matplotlib/matplotlib/issues/7656).  This bug was fixed in `mpl 2.0.1`.  This PR merely fixes the **test** to use JPG instead of PNG files so that it passes with older versions of `mpl`.\r\n\r\nWhen using `mpl <= 2.0.0` the output from the `fits2bitmap` script will continue to be (incorrectly) flipped for PNG output.  We can't really fix this without putting a bunch of `mpl` code in `extern`, which I don't want to do.\r\n\r\nWhile investigating this issue, I also discovered another bug in `mpl` where `imsave` always uses the PNG output format if the `format` keyword is None.  I'm submitting a PR to `mpl` fix this bug.  This PR includes a workaround for that issue by explicitly setting the output file format (which is needed to fix the above test)."""
6966,281063811,mhvk,bsipocz,2017-12-11 15:44:35,2017-12-11 21:10:29,2017-12-11 16:51:14,closed,,v2.0.3,4,Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6966,b'Change way slicing of recarray is done to help numpy 1.9',"b'Tentative fix for numpy 1.9 for the 2.0.3 branch; probably somewhat more logical than my original anyway, so good to go in master too. I think this can be merged if tests on 2.0.3 pass with it.'"
6965,281062528,mhvk,bsipocz,2017-12-11 15:41:06,2017-12-11 17:24:02,2017-12-11 17:24:02,closed,,,2,Bug;testing,https://api.github.com/repos/astropy/astropy/issues/6965,b'Deprecation warnings from ipython breaking test collection',"b""On my workstation (but oddly, not my laptop), I cannot seem to run tests any more as I get deprecation warnings from ipython using `async` and `await` internally. Not completely sure what to do about these - probably a newer version of ipython would resolve this, but on the other hand, astropy tests should not crash because of this.\r\n\r\n```\r\n_________________________________________________ ERROR collecting astropy/table/tests/test_jsviewer.py __________________________________________________\r\nastropy/table/tests/test_jsviewer.py:11: in <module>\r\n    import IPython  # pylint: disable=W0611\r\n/usr/lib/python3/dist-packages/IPython/__init__.py:48: in <module>\r\n    from .core.application import Application\r\n/usr/lib/python3/dist-packages/IPython/core/application.py:25: in <module>\r\n    from IPython.core import release, crashhandler\r\n/usr/lib/python3/dist-packages/IPython/core/crashhandler.py:28: in <module>\r\n    from IPython.core import ultratb\r\n/usr/lib/python3/dist-packages/IPython/core/ultratb.py:124: in <module>\r\n    from IPython.utils import path as util_path\r\n/usr/lib/python3/dist-packages/IPython/utils/path.py:18: in <module>\r\n    from IPython.utils.process import system\r\n/usr/lib/python3/dist-packages/IPython/utils/process.py:19: in <module>\r\n    from ._process_posix import system, getoutput, arg_split, check_pid\r\n/usr/lib/python3/dist-packages/IPython/utils/_process_posix.py:24: in <module>\r\n    import pexpect\r\n/usr/lib/python3/dist-packages/pexpect/__init__.py:75: in <module>\r\n    from .pty_spawn import spawn, spawnu\r\n/usr/lib/python3/dist-packages/pexpect/pty_spawn.py:14: in <module>\r\n    from .spawnbase import SpawnBase\r\nE   DeprecationWarning: 'async' and 'await' will become reserved keywords in Python 3.7\r\n```"""
6960,280760700,mhvk,larrybradley,2017-12-09 22:22:36,2017-12-12 15:31:19,2017-12-12 15:31:19,closed,larrybradley,,6,Bug;testing;visualization,https://api.github.com/repos/astropy/astropy/issues/6960,b'test of fits2bitmap (orientation) fails ',"b'Not sure how this can escape our testing, but on my machine I got an error with numpy 1.14.x for the following, and then found it failed more generally:\r\n```\r\n\r\nself = <astropy.visualization.scripts.tests.test_fits2bitmap.TestFits2Bitmap object at 0x7fe19af6ec88>\r\ntmpdir = local(\'/tmp/user/1000/pytest-of-mhvk/pytest-27/test_orientation0\')\r\n\r\n    def test_orientation(self, tmpdir):\r\n        """"""\r\n            Regression test to check the image vertical orientation/origin.\r\n            """"""\r\n    \r\n        filename = str(tmpdir.join(self.filename))\r\n        data = np.zeros((32, 32))\r\n        data[0:16, :] = 1.\r\n        fits.writeto(filename, data)\r\n        main([filename, \'-e\', \'0\'])\r\n    \r\n        img = mpimg.imread(filename.replace(\'.fits\', \'.png\'))\r\n>       assert img[0, 0, 0] == 0.\r\nE       assert 1.0 == 0.0\r\n\r\nastropy/visualization/scripts/tests/test_fits2bitmap.py:70: AssertionError\r\n```'"
6958,280731933,astrofrog,astrofrog,2017-12-09 16:15:29,2017-12-11 15:04:03,2017-12-11 15:04:03,closed,,,3,Bug;Close?;Docs;modeling,https://api.github.com/repos/astropy/astropy/issues/6958,b'Fitters are missing documentation on __call__',"b'See here:\r\n\r\n<img width=""720"" alt=""screen shot 2017-12-09 at 16 07 35"" src=""https://user-images.githubusercontent.com/314716/33797205-d5a8c680-dcfb-11e7-867b-444e46dea72f.png"">\r\n\r\n``__call__`` does have a docstring. I think the ``@fitter_unit_support`` decorator needs to be adapted to use ``wraps`` from astropy not from functools as I think the one from ``astropy.utils`` preserves docstrings.'"
6955,280637477,mhvk,saimn,2017-12-08 22:36:02,2017-12-11 15:44:54,2017-12-10 11:25:58,closed,,v2.0.3,9,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6955,b'Ensure FITS_rec can be indexed with a tuple even if it returns a scalar.',"b'While investigating numpy-dev failures, I noticed one of them was caused by indexing a `FITS_rec` instance with a tuple of the form `(number,)`, i.e., one that just returns a scalar. This causes a failure (see below) because the `__getitem__` code assumes any tuple key will return a view on the original array (another example of why one should not LBYL but rather EAFP...). This fixes the problem, though scalar lookup will now become somewhat more expensive (probably, a real fix would be to deal with the reference issues that force one to go through the current hoops).\r\n\r\n```\r\nimport numpy as np\r\nfrom astropy.io.fits import FITS_rec\r\nx = np.array([(1.0, 2), (3.0, 4)], dtype=[(\'x\', float), (\'y\', int)]).view(FITS_rec)\r\nx[1,]\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-aacf971fccce> in <module>()\r\n      2 from astropy.io.fits import FITS_rec\r\n      3 x = np.array([(1.0, 2), (3.0, 4)], dtype=[(\'x\', float), (\'y\', int)]).view(FITS_rec)\r\n----> 4 x[1,]\r\n\r\n/usr/lib/python3/dist-packages/astropy/io/fits/fitsrec.py in __getitem__(self, key)\r\n    490             subtype = type(self)\r\n    491             out = self.view(np.recarray).__getitem__(key).view(subtype)\r\n--> 492             out._coldefs = ColDefs(self._coldefs)\r\n    493             arrays = []\r\n    494             out._converted = {}\r\n\r\n/usr/lib/python3/dist-packages/numpy/core/records.py in __setattr__(self, attr, val)\r\n    265             else:\r\n    266                 raise AttributeError(""\'record\' object has no ""\r\n--> 267                         ""attribute \'%s\'"" % attr)\r\n    268 \r\n    269     def __getitem__(self, indx):\r\n\r\nAttributeError: \'record\' object has no attribute \'_coldefs\'\r\n```'"
6953,280557345,pllim,bsipocz,2017-12-08 17:12:40,2017-12-11 21:28:59,2017-12-09 16:45:15,closed,,v2.0.3,4,Bug;coordinates;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/6953,b'Use broadcast_to from compat for Numpy 1.9',b'`np.broadcast_to` is new in Numpy 1.10.\r\n\r\nxref #6918'
6937,279950892,saimn,saimn,2017-12-06 23:59:15,2017-12-21 14:06:24,2017-12-21 14:06:24,closed,,,6,Affects-release;Bug;Effort-low;Package-novice;io.fits,https://api.github.com/repos/astropy/astropy/issues/6937,b'tabledump is broken when the output file is not specified',"b""It seems that previously an HDU could access to its parent HDUList with a `_HDUList__file` attribute, and this was used to get the `filename`. I think the simplest solution would be to make the output file mandatory (`datafile`).\r\n\r\n```\r\nIn [3]: fits.tabledump('astropy/io/fits/tests/data/tb.fits')\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-3-c48651aaf53f> in <module>()\r\n----> 1 fits.tabledump('astropy/io/fits/tests/data/tb.fits')\r\n\r\n~/dev/astropy/astropy/utils/decorators.py in wrapper(*args, **kwargs)\r\n    485                         # one with the name of the new argument to the function\r\n    486                         kwargs[new_name[i]] = value\r\n--> 487             return function(*args, **kwargs)\r\n    488 \r\n    489         return wrapper\r\n\r\n~/dev/astropy/astropy/io/fits/convenience.py in tabledump(filename, datafile, cdfile, hfile, ext, overwrite)\r\n    888             # TODO: Really need to provide a better way to access the name of\r\n    889             # any files underlying an HDU\r\n--> 890             root, tail = os.path.splitext(f._HDUList__file.name)\r\n    891             datafile = root + '_' + repr(ext) + '.txt'\r\n    892 \r\n\r\nAttributeError: 'HDUList' object has no attribute '_HDUList__file'\r\n```"""
6936,279888850,drdavella,pllim,2017-12-06 20:06:57,2018-01-23 18:58:23,2018-01-23 18:58:23,closed,,v2.0.4,1,Bug;testing;wont-fix,https://api.github.com/repos/astropy/astropy/issues/6936,b'Running tests directly from pytest is still broken on v2.0.x',"b""The problem with running tests directly with the `pytest` command was reported in #6424. It was fixed for 3.0 as a consequence of #6606.\r\n\r\nHowever, this still doesn't work for the `v2.0.x` series, even though we have backported some testing-related changes. I don't think this is worth addressing at this point, but I am making an issue here as a record for posterity. Feel free to close.\r\n\r\ncc @bsipocz \r\n"""
6934,279773494,Cadair,mhvk,2017-12-06 14:32:00,2017-12-08 00:02:27,2017-12-07 14:22:06,closed,,v2.0.3,5,Bug;constants;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/6934,b'fix truth value of Quantity is ambiguous warning',"b'The truth value of a Quantity now raises a warning, which was being triggered by having one on the LHS of the `or` statement.'"
6921,278506142,astrofrog,saimn,2017-12-01 15:42:56,2018-01-15 21:21:14,2018-01-15 21:21:14,closed,,,3,Affects-release;Bug;Effort-low;Package-intermediate;io.fits,https://api.github.com/repos/astropy/astropy/issues/6921,b'Possible bug in io.fits related to D exponents',"b""I came across the following code in ``fitsrec.py``:\r\n\r\n```python\r\n        # Replace exponent separator in floating point numbers\r\n        if 'D' in format:\r\n            output_field.replace(encode_ascii('E'), encode_ascii('D'))\r\n```\r\n\r\nI think this may be incorrect because as far as I can tell ``replace`` is not an in-place operation for ``chararray`` (it returns a copy). Commenting out this code doesn't cause any tests to fail so I think this code isn't being tested anyway."""
6905,277595277,larrybradley,crawfordsm,2017-11-29 01:13:26,2017-12-05 20:11:51,2017-12-05 19:01:06,closed,,v2.0.3,6,Affects-release;Bug;stats,https://api.github.com/repos/astropy/astropy/issues/6905,b'Cast input data as np.float64 in biweight functions',"b'I often see floating underflows/overflows in the biweight stat functions when using float32 arrays.  This PR casts the input arrays as float64, which prevents the runtime warnings.\r\n\r\nThis is more a fix than a feature, so I set the milestone as 2.0.3 -- feel free to change.  Also, is a changelog necessary for this small change?'"
6903,277500057,mhvk,astrofrog,2017-11-28 18:59:03,2017-11-29 15:15:57,2017-11-28 22:53:43,closed,,v3.0.0,3,Bug;time,https://api.github.com/repos/astropy/astropy/issues/6903,b'Ensure Time can read byte arrays with items of unequal length.',"b""Before this PR, this broke because the two byte strings were of unequal length:\r\n```\r\nTime([b'2012-01-01', b'2012-01-01T00:00:00']) \r\n```"""
6899,276852790,taldcroft,mhvk,2017-11-26 20:16:47,2017-12-09 19:34:19,2017-11-27 21:09:07,closed,,v2.0.3,8,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/6899,b'Fix problem comparing unicode to bytes masked column (#6838)',b'This PR addresses #6838 and #6839.  The first appears to be an upstream problem in numpy MaskedArray (see #6838 comments).  This PR improves testing and implements a narrow fix for the only case that previously failed.  For #6839 there was an issue that the encoding dropped the masked array.  Fixing this required the fix for #6838 so they are combined in one PR.\r\n\r\nFixes #6838 \r\nFixed #6839\r\n'
6887,275884453,kgabor,drdavella,2017-11-21 22:40:24,2018-01-24 19:21:53,2018-01-24 19:21:53,closed,,,1,Affects-release;Bug;io.fits;table,https://api.github.com/repos/astropy/astropy/issues/6887,b'Changes to integer column values with bzero set in opened fits tables are not written back to file',"b'```python\r\n# Python 3.4.3 (default, Nov 17 2016, 01:08:31) \r\nimport numpy as np\r\nimport astropy\r\nfrom astropy.io import fits as pf\r\nprint (astropy.__version__ , np.__version__)\r\n```\r\n\r\n    2.0.2 1.13.3\r\n\r\n```python\r\nc1=pf.Column(name=\'c1\',array=np.array([1],dtype=\'>i2\'),format=\'1I\',bscale = 1,bzero = 32768)\r\nS=pf.HDUList([pf.PrimaryHDU(),pf.BinTableHDU.from_columns([c1])])\r\nprint(""S="",S[1].data)\r\n# Change value in memory\r\nS[1].data[\'c1\'][0]=2\r\nprint(""S="",S[1].data)\r\nprint(S[1].columns)\r\nS.writeto(""a.fits"")\r\nS.close()\r\n```\r\n    S= [(1,)]\r\n    S= [(2,)]\r\n    ColDefs(\r\n        name = \'c1\'; format = \'1I\'; bscale = 1; bzero = 32768\r\n    )\r\n\r\n```python\r\nX=pf.open(""a.fits"")\r\nprint(""a.fits="",X[1].data)\r\nprint(X[1].columns)\r\n\r\n# Change value in memory\r\nX[1].data[\'c1\'][0]=10\r\nprint(""X="",X[1].data)\r\n\r\n# Write back to file\r\nX.writeto(""b.fits"")\r\nX.close()\r\n\r\n#Now check the file\r\nprint(""b.fits="",pf.open(""b.fits"")[1].data)\r\n```\r\n\r\n    a.fits= [(     2,)]\r\n    ColDefs(\r\n        name = \'c1\'; format = \'1I\'; bscale = 1; bzero = 32768\r\n    )\r\n    X= [(    10,)]\r\n    b.fits= [(     2,)]\r\n\r\nSo if we read in a fits file with bzero set in one column that column can be changed in memory but this is not written back to file by HDUList.writeto(). In case of multiple columns, string and float column changes are written out properly. Without the bzero argument, changes are written out properly.'"
6885,275854477,drdavella,bsipocz,2017-11-21 20:47:13,2017-11-21 22:49:12,2017-11-21 22:17:05,closed,,v3.0.0,3,Bug;no-changelog-entry-needed;testing,https://api.github.com/repos/astropy/astropy/issues/6885,b'Do not use --pyargs by default in setup.cfg',"b'This should fix #6884. The `--pyargs` argument was left over from an earlier iteration of the test refactoring, and is no longer necessary. Its presence does not appear to cause an issue on newer versions of python and pytest, but it does apparently cause problems on Py35.'"
6884,275851387,eteq,bsipocz,2017-11-21 20:35:47,2017-11-21 22:17:05,2017-11-21 22:17:05,closed,drdavella,,1,Affects-dev;Bug;Python3;testing,https://api.github.com/repos/astropy/astropy/issues/6884,b'test runner with -t option fails on python 3.5',"b'Sometime in the last month or so, *something* has caused the ``-t`` command on the test runner to start failing in Python 3.5.  I\'ve included a test run below.  A few relevant facts:\r\n\r\n* It happens on Pytest 3.1.2 or 3.2.1\r\n* It does *not* seem to happen if you give a path to a directory instead of a file.  E.g., the traceback below is for ``python setup.py test -t astropy/io/fits/tests/test_checksum.py``, but ``python setup.py test -t astropy/io/fits/tests`` works just fine.\r\n* It works on Python 3.6.x\r\n* It happens pretty much anywhere in the test suite, but the fail is always wherever the first relative import is.\r\n\r\n```\r\nplatform darwin -- Python 3.5.2, pytest-3.1.1, py-1.4.32, pluggy-0.4.0\r\n\r\nRunning tests with Astropy version 3.0.dev20678.\r\nRunning tests in astropy/io/fits/tests/test_checksum.py.\r\n\r\n...\r\n\r\nplugins: doctestplus-0.1.1, openfiles-0.1.0, remotedata-0.2.0\r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 105, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 140, in _main\r\nINTERNALERROR>     config.hook.pytest_collection(session=session)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py"", line 745, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py"", line 339, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py"", line 334, in <lambda>\r\nINTERNALERROR>     _MultiCall(methods, kwargs, hook.spec_opts).execute()\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/vendored_packages/pluggy.py"", line 614, in execute\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 150, in pytest_collection\r\nINTERNALERROR>     return session.perform_collect()\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 604, in perform_collect\r\nINTERNALERROR>     items = self._perform_collect(args, genitems)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 623, in _perform_collect\r\nINTERNALERROR>     parts = self._parsearg(arg)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 717, in _parsearg\r\nINTERNALERROR>     parts[0] = self._tryconvertpyarg(parts[0])\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/main.py"", line 697, in _tryconvertpyarg\r\nINTERNALERROR>     loader = pkgutil.find_loader(x)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/pkgutil.py"", line 485, in find_loader\r\nINTERNALERROR>     spec = importlib.util.find_spec(fullname)\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/importlib/util.py"", line 88, in find_spec\r\nINTERNALERROR>     parent = __import__(parent_name, fromlist=[\'__path__\'])\r\nINTERNALERROR>   File ""<frozen importlib._bootstrap>"", line 969, in _find_and_load\r\nINTERNALERROR>   File ""<frozen importlib._bootstrap>"", line 958, in _find_and_load_unlocked\r\nINTERNALERROR>   File ""<frozen importlib._bootstrap>"", line 664, in _load_unlocked\r\nINTERNALERROR>   File ""<frozen importlib._bootstrap>"", line 634, in _load_backward_compatible\r\nINTERNALERROR>   File ""/Users/erik/miniconda3/lib/python3.5/site-packages/_pytest/assertion/rewrite.py"", line 216, in load_module\r\nINTERNALERROR>     py.builtin.exec_(co, mod.__dict__)\r\nINTERNALERROR>   File ""/private/var/folders/7_/0n3gbrls1sb2vn6xjprw8c280000gn/T/astropy-test-kk0nqpm2/lib.macosx-10.6-x86_64-3.5/astropy/io/fits/tests/test_checksum.py"", line 9, in <module>\r\nINTERNALERROR>     from .test_table import comparerecords\r\nINTERNALERROR> SystemError: Parent module \'\' not loaded, cannot perform relative import\r\n```\r\n'"
6862,274505318,nabobalis,saimn,2017-11-16 12:52:31,2017-12-04 11:42:27,2017-12-04 11:39:16,closed,,,8,Affects-dev;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6862,b'Gzipped FITS BinTableHDU readonly now',"b""Recently, we noticed a test failure within SunPy against astropy master.\r\n\r\nWe have a test that opens a gzipped fits file and makes some adjusts to the data to remove potential bad values. We get that\r\n\r\n```python \r\nValueError: assignment destination is read-only\r\n```\r\n\r\nThis seems to only occur for any FITS data that is returned with a astropy.io.fits.hdu.table.BinTableHDU, astropy.io.fits.hdu.image.PrimaryHDU are unaffected by this. \r\n\r\nExample would be:\r\n\r\n```python\r\nfrom astropy.io import fits\r\nafile = fits.open('go1520120601.fits.gz') #from https://github.com/sunpy/sunpy/blob/master/sunpy/data/test/go1520120601.fits.gz\r\nprint(afile)\r\n#[<astropy.io.fits.hdu.image.PrimaryHDU object at 0x7fbc7c00fc88>, \r\n#<astropy.io.fits.hdu.table.BinTableHDU object at 0x7fbc7c018080>,\r\n#<astropy.io.fits.hdu.table.BinTableHDU object at 0x7fbc7a5975f8>,\r\n#<astropy.io.fits.hdu.table.BinTableHDU object at 0x7fbc7a5a1438>]\r\nafile[1].data[0][0][0][0] = 2\r\n# ValueError: assignment destination is read-only\r\n```\r\n\r\nIs this intended behaviour? """
6851,273904933,pllim,pllim,2017-11-14 18:59:15,2017-11-14 21:14:19,2017-11-14 21:14:16,closed,,v3.0.0,4,Affects-release;Bug;io.votable;no-changelog-entry-needed;testing,https://api.github.com/repos/astropy/astropy/issues/6851,b'Address difflib TypeError in vo_test',"b""Address `difflib` `TypeError` in `vo_test.py` as reported in #6850 . This bug is unrelated to Numpy dev but rather manifests itself during testing with Numpy dev due to floating point differences, which triggered it.\r\n\r\n@mhvk , there is no other people listed for `io.votable`, so I have volunteered you as a tribute (reviewer) since this is remotely related to Numpy dev stuff.\r\n\r\n@bsipocz , I tentatively milestoned this to 3.0 because I don't think it is critical enough for 2.x. But feel free to re-milestone if you disagree."""
6844,273496671,larrybradley,larrybradley,2017-11-13 16:40:57,2017-11-14 04:27:08,2017-11-14 04:27:04,closed,,v2.0.3,6,Affects-release;Bug;merge-when-ci-passes;visualization,https://api.github.com/repos/astropy/astropy/issues/6844,b'Fix image vertical orientation in fits2bitmap script',"b'Fixes #6841.\r\n\r\nThanks for reporting this, @cdeil!'"
6841,273409185,cdeil,larrybradley,2017-11-13 12:15:55,2017-11-14 04:27:04,2017-11-14 04:27:04,closed,,,2,Affects-release;Bug;visualization,https://api.github.com/repos/astropy/astropy/issues/6841,b'Vertical image orientation flip in fits2bitmap',"b'I find that `fits2bitmap` results in images that have the output vertical orientation flipped wrt. how the FITS image appears by default in DS9.\r\n\r\n@larrybradley - Is this on purpose or by accident? Change orientation to match?\r\n\r\nTo reproduce:\r\n```\r\nwget http://data.astropy.org/tutorials/FITS-images/HorseHead.fits\r\nfits2bitmap HorseHead.fits\r\n```\r\nWith `ds9 HorseHead.fits` the horsie is looking up:\r\n![ds9](https://user-images.githubusercontent.com/852409/32725247-9c5d902c-c874-11e7-912c-8ace7767f9ad.png)\r\n\r\nWith `open HorseHead.png`, i.e. the `fits2bitmap` output, the horsie is looking down:\r\n![fits2bitmap](https://user-images.githubusercontent.com/852409/32725272-b2ae84a8-c874-11e7-9a07-340f4abfda5d.png)\r\n'"
6839,273226111,astrofrog,mhvk,2017-11-12 12:42:06,2017-11-27 21:09:06,2017-11-27 21:09:06,closed,,,1,Bug;table,https://api.github.com/repos/astropy/astropy/issues/6839,b'Bug in Table with unicode sandwich when dealing with masked columns',"b""When comparing masked columns in bytes and unicode, the result is different when comparing two unicode columns compared to comparing a unicode and a bytes column:\r\n\r\n```python\r\nIn [1]: from astropy.table import Table\r\n   ...: \r\n\r\nIn [2]: t1 = Table(masked=True)\r\n   ...: t1['a'] = ['z', 'b', 'c']\r\n   ...: t1['a'].mask = [1, 0, 0]\r\n   ...: t2 = Table(masked=True)\r\n   ...: t2['a'] = ['a', 'b', 'c']\r\n   ...: \r\n\r\nIn [3]: t2['a'] == t1['a']\r\nOut[3]: \r\nmasked_array(data = [-- True True],\r\n             mask = [ True False False],\r\n       fill_value = True)\r\n\r\nIn [4]: t1 = Table(masked=True)\r\n   ...: t1['a'] = ['z', 'b', 'c']\r\n   ...: t1['a'].mask = [1, 0, 0]\r\n   ...: t2 = Table(masked=True)\r\n   ...: t2['a'] = [b'a', b'b', b'c']\r\n   ...: \r\n\r\nIn [5]: t2['a'] == t1['a']\r\nOut[5]: \r\nmasked_array(data = [False True True],\r\n             mask = [False False False],\r\n       fill_value = True)\r\n```\r\n\r\nIn the second case, the first mask item should be ``True``. This is a separate issue from https://github.com/astropy/astropy/issues/6838 (but I had to do ``t2['a'] == t1['a']`` instead of ``t1['a'] == t2['a']`` to avoid running into that issue).\r\n\r\ncc @taldcroft @mhvk"""
6838,273224646,astrofrog,mhvk,2017-11-12 12:15:57,2017-12-11 14:46:14,2017-11-27 21:09:06,closed,,,6,Bug;table,https://api.github.com/repos/astropy/astropy/issues/6838,b'Bug in Table with unicode sandwich related to order of comparison',"b""The following example demonstrates an issue when comparing a string column with a bytes column:\r\n\r\n```python\r\nIn [64]: t1 = Table(masked=True)\r\n\r\nIn [65]: t1['a'] = ['a', 'b', 'c']\r\n\r\nIn [66]: t2 = Table(masked=True)\r\n\r\nIn [67]: t2['a'] = [b'a', b'b', b'c']\r\n\r\nIn [68]: t1['a'] == t2['a']\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-68-372e9d1afaab> in <module>()\r\n----> 1 t1['a'] == t2['a']\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/table/column.py in _compare(self, other)\r\n    938             if self.dtype.char == 'S':\r\n    939                 other = self._encode_str(other)\r\n--> 940             return getattr(self.data, oper)(other)\r\n    941         return _compare\r\n    942 \r\n\r\n~/miniconda3/envs/dev/lib/python3.6/site-packages/numpy/ma/core.py in __eq__(self, other)\r\n   3909         else:\r\n   3910             odata = filled(other, 0)\r\n-> 3911             check = self.filled(0).__eq__(odata).view(type(self))\r\n   3912             if self._mask is nomask:\r\n   3913                 check._mask = omask\r\n\r\nAttributeError: 'NotImplementedType' object has no attribute 'view'\r\n\r\nIn [69]: t2['a'] == t1['a']\r\nOut[69]: \r\nmasked_array(data = [True True True],\r\n             mask = [False False False],\r\n       fill_value = True)\r\n```\r\n\r\nThe expected result is that ``t1['a'] == t2['a']`` should be equal to ``t2['a'] == t1['a']``\r\n\r\ncc @taldcroft @mhvk"""
6834,273068455,agowardhan,agowardhan,2017-11-10 21:40:26,2017-12-18 12:08:19,2017-12-15 15:32:49,closed,,,6,Affects-release;Bug;io.fits,https://api.github.com/repos/astropy/astropy/issues/6834,b'Fix fitsdiff with a directory argument',b'os.path.abspath(f) gets the absolute path from the current directory (without checking if file exists) rather than os.path.abspath(path/f) which is needed. \r\n\r\nEDIT: Fix #6760 '
6832,272978097,mhvk,mhvk,2017-11-10 15:58:24,2017-11-10 17:14:17,2017-11-10 17:14:17,closed,,v2.0.3,4,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/6832,b'Ensure byte-valued Column inputs to Time are possible.',"b'For this purpose, convert all input elements using vectorize rather than nditer, to avoid coercion to arrays and thus allow Column.__getitem__ to do conversion from bytes to string.\r\n\r\nThis is an alternative to #6823, probably better as less intrusive and more targeted.\r\n\r\nThis is helpful for #6821.\r\n'"
6825,272702512,pllim,pllim,2017-11-09 20:00:11,2017-11-09 20:47:39,2017-11-09 20:47:39,closed,,,0,Bug;Docs,https://api.github.com/repos/astropy/astropy/issues/6825,b'RTD build is broken',"b'For example: https://readthedocs.org/projects/astropy/builds/6242940/\r\n```\r\nException occurred:\r\n  File "".../astropy/tests/helper.py"", line 14, in <module>\r\n    import pytest\r\nModuleNotFoundError: No module named \'pytest\'\r\n```\r\n\r\nLast successful build was 2 days and 11 hours ago.'"
6824,272666247,mhvk,mhvk,2017-11-09 18:12:56,2017-12-22 21:09:44,2017-12-22 21:09:44,closed,,v3.0.0,1,Affects-release;Bug;numpy-dev,https://api.github.com/repos/astropy/astropy/issues/6824,b'More format changes in numpy-dev',"b'Once the final format changes are in for `numpy-dev` (e.g., https://github.com/numpy/numpy/pull/9332), another round of editing of doctests will be needed...'"
6823,272653093,mhvk,taldcroft,2017-11-09 17:29:12,2017-11-27 14:55:03,2017-11-25 16:20:34,closed,,v3.0.0,21,Affects-release;Bug;time,https://api.github.com/repos/astropy/astropy/issues/6823,"b""Time allow initialization with bytes or dtype='S' ndarray input""","b""Currently, if we pass a `Column` with `dtype='S'` to `Time`, this raises an error even though `Column` itself knows how to translate the bytes to strings. The problem is that in iterating over the column using `np.nditer`, the input is treated as a regular array. There are two possible solutions: use the `multi_index` of the iterator to get the item, so that `Column.__getitem__` can return a string, or just being more generally accepting of bytes input, and treating it as ascii. In this PR, I took the latter approach, as it was simpler and I didn't really see a downside to it.\r\n\r\nThis is helpful for #6821.\r\n"""
6815,271938962,hrishikeshgoyal,hrishikeshgoyal,2017-11-07 18:39:40,2017-11-07 23:40:44,2017-11-07 19:08:17,closed,,,2,Affects-release;Bug;table,https://api.github.com/repos/astropy/astropy/issues/6815,"b'Fixed the issue #6791, allowing Columns in hstack table operation.'",b'Allowed Columns to appear in list of tables argument to be passed in hstack.\r\nspecial handling of column object in the list of tables is required.. to avoid that.. I table out of every single column object present in the table list.\r\n\r\nEDIT: Fix #6791 '
6812,271626949,taldcroft,mhvk,2017-11-06 21:29:35,2017-12-14 16:20:03,2017-11-07 19:04:46,closed,,v3.0.0,4,Affects-dev;Bug;table,https://api.github.com/repos/astropy/astropy/issues/6812,b'Fix problem where bad column format is not reverted',"b'#6385 added code to validate `format` when it is set, but in the mean time the expected `TypeError` got changed to a `ValueError`.  The unit testing of this just checks for a `ValueError` but does not check that the `format` got reverted.\r\n```\r\n        try:\r\n            # test whether it formats without error exemplarily\r\n            self.pformat(max_lines=1)\r\n        except TypeError as err:\r\n            # revert to restore previous format if there was one\r\n            self._format = prev_format\r\n            raise ValueError(\r\n                ""Invalid format for column \'{0}\': could not display ""\r\n                ""values in this column using this format ({1})"".format(\r\n                    self.name, err.args[0]))\r\n```\r\n'"
6800,269331155,MSeifert04,mhvk,2017-10-28 16:37:33,2017-10-28 18:50:07,2017-10-28 18:48:07,closed,,v2.0.3,3,Affects-release;Bug;utils,https://api.github.com/repos/astropy/astropy/issues/6800,b'Typo in import: pyreadyline -> pyreadline',b'Just a typo in an import.\r\n\r\nNote sure about the milestone and if this needs a changelog because IPython 2 is pretty old and it only affects Windows.'
6783,267789519,bmorris3,bsipocz,2017-10-23 19:32:01,2017-10-23 21:48:32,2017-10-23 21:48:28,closed,,v2.0.3,6,Affects-dev;Bug;time,https://api.github.com/repos/astropy/astropy/issues/6783,b'Fix AstropyDeprecationWarning from Time constructor',"b""I'm getting an `AstropyDeprecationWarning` from some astroplan tests which construct `Time` objects with locations, which originates from #6590. In the `Time` constructor, there's [an `if` block that states `if self.location and ....`](https://github.com/astropy/astropy/blob/master/astropy/time/core.py#L281). That syntax is now deprecated as `Quantity` objects will not be evaluated as booleans. \r\n\r\n**Note**: this issue is the primary blocker to releasing the next version of astroplan (and probably any other affiliated package that uses `Time` objects)"""
6779,267398545,mhvk,bsipocz,2017-10-21 17:23:25,2017-10-22 14:56:02,2017-10-22 13:57:33,closed,,v3.0.0,8,Affects-dev;Bug;units,https://api.github.com/repos/astropy/astropy/issues/6779,"b'Revert ""Use double dollar signs for LaTeX output""'","b'Reverts astropy/astropy#6502, since it breaks current use of `_repr_latex` in, e.g., sunpy\r\n'"
6773,267016984,MSeifert04,pllim,2017-10-19 23:10:06,2017-10-22 19:49:58,2017-10-22 19:25:20,closed,,v3.0.0,6,Bug;io.votable;utils,https://api.github.com/repos/astropy/astropy/issues/6773,b'Fixes for HomogeneousList',"b""I don't know how user-facing this class is but it's used in votable. However I noticed several very weird (and wrong) stuff in there.\r\n\r\nInstead of using the hard-coded `list.methodname` calls we can use `super()` in astropy 3.x but that wouldn't work for 2.0.x. If this is merged one could consider a follow-up PR that uses `super` there."""
6753,266026995,MSeifert04,saimn,2017-10-17 07:57:17,2017-10-17 12:04:22,2017-10-17 11:53:35,closed,,v2.0.3,3,Bug;io.fits;no-changelog-entry-needed,https://api.github.com/repos/astropy/astropy/issues/6753,b'Wrong comparison operator',"b""This clearly was an oversight (checking the same condition twice), however it's an _almost_ unaccessible part of the code so probably never noticed/will notice (so while technically a bug I added no changelog)..."""

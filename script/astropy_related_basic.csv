issue,id,reporter,closed_by,created_at,updated_at,closed_at,state,assignee,milestone,comments,label_name,url,title,body
spacetelescope/PyFITS#82,38129320,embray,SaraOgaz,2014-07-17 21:39:00,2017-12-13 15:54:49,2017-12-13 15:54:49,closed,,,1,effort-medium;package-expert,https://api.github.com/repos/spacetelescope/PyFITS/issues/82,b'Support for TUCD and/or arbitrary header keywords in Column constructor ',"b' The pyfits.Column class currently supports optional arguments to define the following header keywords for the column:\n\n```\nArgument        Corresponding         Description\nin Column()     header keyword\n\nname            TTYPE                 column name\nformat          TFORM                 column format\nunit            TUNIT                 unit\nnull            TNULL                 null value (only for B, I, and J)\nbscale          TSCAL                 scaling factor for data\nbzero           TZERO                 zero point for data scaling\ndisp            TDISP                 display format\ndim             TDIM                  multi-dimensional array spec\nstart           TBCOL                 starting position for ASCII table\n```\n\nWe also need to define TUCD header keywords for each of our columns; a unified content descriptor according to the UCD1+ controlled vocabulary to describe astronomical data quantities (version 1.23, IVOA 02 April 2007). So we would appreciate a ""ucd"" argument to the constructor that accepts a Python ""str"".\n\nThis made me wonder whether it may be useful to support arbitrary keyword arguments in the constructor that would also create the corresponding FITS T\\* header keyword, e.g. a ucd argument would generate a TUCD header keyword for the column with the given str value, and a comm argument would generate a TCOMM header keyword for the column with the given str value etc.\n\nOriginal ticket: https://aeon.stsci.edu/ssb/trac/pyfits/ticket/164\n'"
sunpy/sunpy#2390,284311184,nabobalis,nabobalis,2017-12-23 15:16:35,2018-01-30 09:08:56,2018-01-30 09:08:56,closed,,,1,Affects Dev;Priority High;Upstream Fix Required;coordinates,https://api.github.com/repos/sunpy/sunpy/issues/2390,b'Astropy Master Breaks Coordinates ',"b""We currently break under the master version of astropy as they are changing various items for their next major release (3.0.0).\r\n\r\nCurrent Output from Travis.\r\n```\r\nsunpy/coordinates/__init__.py:6: in <module>\r\n    from .ephemeris import *\r\nsunpy/coordinates/ephemeris.py:106: in <module>\r\n    get_earth(_time_first_rotation).hcrs.cartesian.transform(_SUN_DETILT_MATRIX) \\\r\nsunpy/coordinates/ephemeris.py:73: in get_earth\r\n    earth = SkyCoord(0*u.deg, earth.lat, earth.radius, frame=earth)\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:221: in __init__\r\n    kwargs = self._parse_inputs(args, kwargs)\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:358: in _parse_inputs\r\n    valid_kwargs.update(_get_representation_attrs(frame, units, kwargs))\r\n/home/travis/miniconda/envs/test/lib/python3.6/site-packages/astropy/coordinates/sky_coordinate.py:2040: in _get_representation_attrs\r\n    differential_type = frame._representation['s'].attr_classes\r\nE   AttributeError: 'NoneType' object has no attribute 'attr_classes'\r\n```"""
gammapy/gammapy#1248,288365423,cdeil,,2018-01-13 22:38:52,2018-01-26 07:45:29,None,open,cdeil,0.8,1,astropy;tests;upstream,https://api.github.com/repos/gammapy/gammapy/issues/1248,b'Gammapy test fails with Python 2 and Numpy 1.14',"b""We have a bunch of CI fails that are all Python 2 and appeared with the recent Numpy 1.14 release:\r\nhttps://travis-ci.org/gammapy/gammapy/builds/328225839\r\n\r\nI've looked through them, and they are all due to one bug that was introduced in `np.einsum`, see my comments here https://github.com/astropy/astropy/issues/7051#issuecomment-357468791\r\nIt's already fixed in Numpy master (see https://github.com/numpy/numpy/pull/10371), but I'm not sure if that will go out via Numpy 1.14.1 and if so when that will be.\r\n\r\nI'm not sure how to get a green CI build again with minimal effort. @bsipocz - Would pinning Python 2 CI builds to Numpy 1.13 be easy to achieve? I think adding skip or xfail markers for all the tests that fail on Python 2 now would be a bit annoying, but of course that could be done as well.\r\n"""
numpy/numpy#10369,287704154,saimn,mhvk,2018-01-11 08:42:47,2018-01-11 13:49:30,2018-01-11 13:49:30,closed,,,2,,https://api.github.com/repos/numpy/numpy/issues/10369,b'einsum error with unicode input (regression in Numpy 1.14)',"b'This was working before Numpy 1.14 and now fails (on Python 2):\r\n\r\n```python\r\nIn [1]: from __future__ import unicode_literals\r\n   ...: import numpy as np\r\n   ...: np.einsum(\'...i,...i\', [1,2,3], [2,3,4])\r\n   ...: \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-dea65e271386> in <module>()\r\n      1 from __future__ import unicode_literals\r\n      2 import numpy as np\r\n----> 3 np.einsum(\'...i,...i\', [1,2,3], [2,3,4])\r\n\r\n/home/conseil/miniconda3/envs/py2/lib/python2.7/site-packages/numpy/core/einsumfunc.pyc in einsum(*operands, **kwargs)\r\n   1085     # Build the contraction list and operand\r\n   1086     operands, contraction_list = einsum_path(*operands, optimize=optimize_arg,\r\n-> 1087                                              einsum_call=True)\r\n   1088\r\n   1089     handle_out = False\r\n\r\n/home/conseil/miniconda3/envs/py2/lib/python2.7/site-packages/numpy/core/einsumfunc.pyc in einsum_path(*operands, **kwargs)\r\n    686\r\n    687     # Python side parsing\r\n--> 688     input_subscripts, output_subscript, operands = _parse_einsum_input(operands)\r\n    689     subscripts = input_subscripts + \'->\' + output_subscript\r\n    690\r\n\r\n/home/conseil/miniconda3/envs/py2/lib/python2.7/site-packages/numpy/core/einsumfunc.pyc in _parse_einsum_input(operands)\r\n    529         if char not in input_subscripts:\r\n    530             raise ValueError(""Output character %s did not appear in the input""\r\n--> 531                              % char)\r\n    532\r\n    533     # Make sure number operands is equivalent to the number of terms\r\n\r\nValueError: Output character e did not appear in the input\r\n```'"
,,,,,,,,,,,,,,
nanograv/enterprise#147,289082536,CaseyMcGrath,,2018-01-16 22:46:47,2018-01-17 22:56:38,None,open,,,2,bug,https://api.github.com/repos/nanograv/enterprise/issues/147,b'Enterprise not compatible with numpy 1.14.0',"b'Sarah Vigeland and I were just troubleshooting a problem I was encountering when trying to run the continuous wave search code.  We found that the latest version of numpy (1.14.0) doesn\'t seem to be compatible with enterprise.  Here is a look at some of the documentation on the that latest numpy release:\r\nhttps://github.com/numpy/numpy/releases\r\n\r\nIt sort of looked like from the error messages that I was getting that something was wrong with the _np.einsum_ function, which appears to be under the ""highlights"" as one of the things that just changed in this release.  (Sorry, I didn\'t take a screen-shot of the actual error message before I closed the terminal)'"
shbhuk/barycorrpy#5,281244505,shbhuk,,2017-12-12 03:23:25,2018-01-11 22:23:57,None,open,shbhuk,,2,enhancement,https://api.github.com/repos/shbhuk/barycorrpy/issues/5,b'Implement UTC_BJD converter as additional feature.',b'Since all the framework is already in place include the UTC to BJD converter. '
numpy/numpy#10371,287715196,saimn,mhvk,2018-01-11 09:23:01,2018-01-14 00:18:52,2018-01-11 13:49:30,closed,,1.15.0 release,3,00 - Bug;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/10371,b'BUG: fix einsum issue with unicode input and py2',"b'Fix #10369. The issue is the use of `isinstance(..., str)`. There is a `np.compat.basestring` but I used the way that is used in `np.core` to re-define `basestring` for py3.'"
numpy/numpy#10343,286710731,d70-t,charris,2018-01-08 11:02:24,2018-02-05 17:33:08,2018-02-05 17:33:08,closed,,1.14.1 release,8,05 - Regression;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/10343,b'einsum broadcast regression (with optimize=True)',"b'In numpy 1.13.3, it was possible to execute the following snippet without errors, while in 1.14.0 this happens:\r\n```python\r\nIn [1]: import numpy as np\r\nIn [2]: a = np.ones((10,2))\r\nIn [3]: b = np.ones((1,2))\r\nIn [4]: np.einsum(\'t...i,ti->t...\', a, b)\r\nTraceback (most recent call last):\r\n  File ""<ipython-input-4-fa62d1d882f9>"", line 1, in <module>\r\n    np.einsum(\'t...i,ti->t...\', a, b)\r\n  File ""/usr/local/lib/python2.7/dist-packages/numpy/core/einsumfunc.py"", line 1087, in einsum\r\n    einsum_call=True)\r\n  File ""/usr/local/lib/python2.7/dist-packages/numpy/core/einsumfunc.py"", line 710, in einsum_path\r\n    ""not match previous terms."", char, tnum)\r\nValueError: (""Size of label \'%s\' for operand %d does not match previous terms."", \'t\', 1)\r\n\r\n```\r\nHowever `optimize=False` solves the problem:\r\n```python\r\nIn [5]: np.einsum(\'t...i,ti->t...\', a, b, optimize=False)\r\nOut[5]: array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])\r\n```\r\nIs this intended behavior and the user is now responsible to explicitly disable optimization or is this a bug?'"
matplotlib/matplotlib#7656,196937551,cdeil,NelleV,2016-12-21 13:50:47,2017-01-11 18:17:45,2017-01-11 18:17:45,closed,,v2.0.1,2,Difficulty: Easy;new-contributor-friendly,https://api.github.com/repos/matplotlib/matplotlib/issues/7656,b'imsave ignores origin option',"b'For me, the `imsave` option `origin=""lower""` is silently ignored when saving to PNG.\r\n\r\nIf I execute this script, the resulting two images are identical:\r\n```python\r\nimport numpy as np\r\nfrom matplotlib.image import imsave\r\n\r\nimage = np.arange(30*20).reshape((20, 30))\r\nimsave(\'lower.png\', image, origin=\'lower\')\r\nimsave(\'upper.png\', image, origin=\'upper\')\r\n```\r\n\r\nIs this a MPL bug?\r\n\r\n---\r\n\r\nVersion info: Python 3.5 as well as Numpy and MPL installed via macports, then MPL 2.0.0rc2 via pip in user site-packages, i.e. this is with MPL 2.0.0rc2.\r\n\r\n---\r\nlower.png is here:\r\n\r\n![lower](https://cloud.githubusercontent.com/assets/852409/21391602/b47c2f0e-c78c-11e6-97f3-87741ecc8d1e.png)\r\n\r\n---\r\nupper.png is here:\r\n\r\n![upper](https://cloud.githubusercontent.com/assets/852409/21391620/bec989f2-c78c-11e6-94dc-93e8124e630b.png)\r\n\r\n\r\n'"
numpy/numpy#10104,277190627,mhvk,mhvk,2017-11-27 22:23:28,2017-11-28 03:31:35,2017-11-28 03:31:35,closed,,,2,00 - Bug;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/10104,b'BUG: Allow MaskedArray.__eq__ and __ne__ to return NotImplemented.',"b""Comparison was based on using operator.eq and operator.ne on the underlying arrays. This goes wrong, however, if one of those does not know how to deal properly with the other - as was exposed by astropy issue https://github.com/astropy/astropy/issues/6838.\r\n\r\n@charris - is there any hope to still have this in 1.14?\r\n\r\np.s. I somewhat on purpose made the somewhat ugly `lambda` definitions in `__eq__` and `__ne__` as I didn't want to gratuitously change the API of `_compare`. It's easy to change it to just passing on the string."""
numpy/numpy#8590,206393401,mhvk,eric-wieser,2017-02-09 03:24:11,2017-02-28 01:21:25,2017-02-28 00:00:10,closed,,,37,00 - Bug;56 - Needs Release Note.;component: numpy.ma,https://api.github.com/repos/numpy/numpy/issues/8590,"b'BUG MaskedArray __eq__ wrong for masked scalar, multi-d recarray'","b'In the process of trying to fix the ""questionable behaviour in `MaskedArray.__eq__`"" (#8589), it became clear that the code was more than a little buggy. E.g., `ma == ma[0]` failed if `ma` held a structured dtype; multi-d structured dtypes failed generally; and, more worryingly, a masked scalar comparison could be wrong:\r\n```\r\nnp.ma.MaskedArray(1, mask=True) == 0\r\n# True\r\n```\r\nIt doesn\'t help to do tests on data filled with 0 if one doesn\'t consistently check the mask after... (for the rest, see the new test cases)'"
,,,,,,,,,,,,,,
numpy/numpy#9332,239585868,ahaldane,charris,2017-06-29 19:25:20,2017-11-12 21:46:10,2017-11-12 15:01:54,closed,,1.14.0 release,68,01 - Enhancement;component: numpy.core,https://api.github.com/repos/numpy/numpy/issues/9332,b'ENH: fix 0d array printing using `str` or `formatter`.',"b'This is split off from #9139, plus has some extra editing of the release notes.'"
